var searchIndex = {};
searchIndex["stable_bst"] = {"doc":"Maps are collections of unique keys with corresponding values, and sets are\njust unique keys without a corresponding value.","items":[[0,"map","stable_bst","",null,null],[3,"TreeMap","stable_bst::map","This is implemented as an AA tree, which is a simplified variation of\na red-black tree where red (horizontal) nodes can only be added\nas a right child. The time complexity is the same, and re-balancing\noperations are more frequent but also cheaper.",null,null],[3,"Iter","","Lazy forward iterator over a map",null,null],[3,"RevIter","","Lazy backward iterator over a map",null,null],[3,"IterMut","","Lazy forward iterator over a map that allows for the mutation of\nthe values.",null,null],[3,"RevIterMut","","Lazy backward iterator over a map",null,null],[3,"Keys","","TreeMap keys iterator.",null,null],[3,"Values","","TreeMap values iterator.",null,null],[3,"IntoIter","","Lazy forward iterator over a map that consumes the map while iterating",null,null],[11,"clone","","",0,{"inputs":[{"name":"treemap"}],"output":{"name":"treemap"}}],[11,"eq","","",0,{"inputs":[{"name":"treemap"},{"name":"treemap"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"treemap"},{"name":"treemap"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"treemap"},{"name":"treemap"}],"output":{"name":"ordering"}}],[11,"fmt","","",0,{"inputs":[{"name":"treemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"treemap"}}],[11,"index","","",0,{"inputs":[{"name":"treemap"},{"name":"q"}],"output":{"name":"v"}}],[11,"index_mut","","",0,{"inputs":[{"name":"treemap"},{"name":"q"}],"output":{"name":"v"}}],[11,"new","","Creates an empty `TreeMap` ordered according to the natural order of its keys.",0,{"inputs":[],"output":{"name":"treemap"}}],[11,"with_comparator","","Creates an empty `TreeMap` ordered according to the given comparator.",0,{"inputs":[{"name":"c"}],"output":{"name":"treemap"}}],[11,"comparator","","Returns the comparator according to which the `TreeMap` is ordered.",0,{"inputs":[{"name":"treemap"}],"output":{"name":"c"}}],[11,"keys","","Gets a lazy iterator over the keys in the map, in ascending order.",0,{"inputs":[{"name":"treemap"}],"output":{"name":"keys"}}],[11,"values","","Gets a lazy iterator over the values in the map, in ascending order\nwith respect to the corresponding keys.",0,{"inputs":[{"name":"treemap"}],"output":{"name":"values"}}],[11,"iter","","Gets a lazy iterator over the key-value pairs in the map, in ascending order.",0,{"inputs":[{"name":"treemap"}],"output":{"name":"iter"}}],[11,"rev_iter","","Gets a lazy reverse iterator over the key-value pairs in the map, in descending order.",0,{"inputs":[{"name":"treemap"}],"output":{"name":"reviter"}}],[11,"iter_mut","","Gets a lazy forward iterator over the key-value pairs in the\nmap, with the values being mutable.",0,{"inputs":[{"name":"treemap"}],"output":{"name":"itermut"}}],[11,"rev_iter_mut","","Gets a lazy reverse iterator over the key-value pairs in the\nmap, with the values being mutable.",0,{"inputs":[{"name":"treemap"}],"output":{"name":"revitermut"}}],[11,"into_iter","","Gets a lazy iterator that consumes the treemap.",0,{"inputs":[{"name":"treemap"}],"output":{"name":"intoiter"}}],[11,"len","","Return the number of elements in the map.",0,{"inputs":[{"name":"treemap"}],"output":{"name":"usize"}}],[11,"is_empty","","Return true if the map contains no elements.",0,{"inputs":[{"name":"treemap"}],"output":{"name":"bool"}}],[11,"clear","","Clears the map, removing all values.",0,{"inputs":[{"name":"treemap"}],"output":null}],[11,"get","","Returns a reference to the value corresponding to the key.",0,{"inputs":[{"name":"treemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",0,{"inputs":[{"name":"treemap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",0,{"inputs":[{"name":"treemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair from the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",0,{"inputs":[{"name":"treemap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",0,{"inputs":[{"name":"treemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"find_with","","Returns the value for which `f(key)` returns `Equal`. `f` is invoked\nwith current key and guides tree navigation. That means `f` should\nbe aware of natural ordering of the tree.",0,{"inputs":[{"name":"treemap"},{"name":"f"}],"output":{"name":"option"}}],[11,"find_with_mut","","Returns the value for which `f(key)` returns `Equal`. `f` is invoked\nwith current key and guides tree navigation. That means `f` should\nbe aware of natural ordering of the tree.",0,{"inputs":[{"name":"treemap"},{"name":"f"}],"output":{"name":"option"}}],[11,"lower_bound","","Returns a lazy iterator to the first key-value pair whose key is not less than `k`\nIf all keys in map are less than `k` an empty iterator is returned.",0,{"inputs":[{"name":"treemap"},{"name":"q"}],"output":{"name":"iter"}}],[11,"upper_bound","","Returns a lazy iterator to the first key-value pair whose key is greater than `k`\nIf all keys in map are less than or equal to `k` an empty iterator is returned.",0,{"inputs":[{"name":"treemap"},{"name":"q"}],"output":{"name":"iter"}}],[11,"lower_bound_mut","","Returns a lazy value iterator to the first key-value pair (with\nthe value being mutable) whose key is not less than `k`.",0,{"inputs":[{"name":"treemap"},{"name":"q"}],"output":{"name":"itermut"}}],[11,"upper_bound_mut","","Returns a lazy iterator to the first key-value pair (with the\nvalue being mutable) whose key is greater than `k`.",0,{"inputs":[{"name":"treemap"},{"name":"q"}],"output":{"name":"itermut"}}],[11,"next","","Advances the iterator to the next node (in order) and return a\ntuple with a reference to the key and value. If there are no\nmore nodes, return `None`.",1,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next","","",2,{"inputs":[{"name":"reviter"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next","","Advances the iterator to the next node (in order) and return a\ntuple with a reference to the key and value. If there are no\nmore nodes, return `None`.",3,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next","","",4,{"inputs":[{"name":"revitermut"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next","","",5,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next","","",6,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next","","",7,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"from_iter","","",0,{"inputs":[{"name":"t"}],"output":{"name":"treemap"}}],[11,"extend","","",0,{"inputs":[{"name":"treemap"},{"name":"t"}],"output":null}],[11,"hash","","",0,{"inputs":[{"name":"treemap"},{"name":"h"}],"output":null}],[11,"into_iter","","",0,{"inputs":[{"name":"treemap"}],"output":{"name":"intoiter"}}],[0,"set","stable_bst","",null,null],[3,"TreeSet","stable_bst::set","An implementation of a set on top of the `TreeMap` container.",null,null],[3,"Iter","","A lazy forward iterator over a set.",null,null],[3,"RevIter","","A lazy backward iterator over a set.",null,null],[3,"IntoIter","","A lazy forward iterator over a set that consumes the set while iterating.",null,null],[3,"Difference","","A lazy iterator producing elements in the set difference (in-order).",null,null],[3,"SymmetricDifference","","A lazy iterator producing elements in the set symmetric difference (in-order).",null,null],[3,"Intersection","","A lazy iterator producing elements in the set intersection (in-order).",null,null],[3,"Union","","A lazy iterator producing elements in the set union (in-order).",null,null],[11,"clone","","",8,{"inputs":[{"name":"treeset"}],"output":{"name":"treeset"}}],[11,"eq","","",8,{"inputs":[{"name":"treeset"},{"name":"treeset"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"treeset"},{"name":"treeset"}],"output":{"name":"option"}}],[11,"cmp","","",8,{"inputs":[{"name":"treeset"},{"name":"treeset"}],"output":{"name":"ordering"}}],[11,"fmt","","",8,{"inputs":[{"name":"treeset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"treeset"}}],[11,"new","","Creates an empty `TreeSet` ordered according to the natural order of its values.",8,{"inputs":[],"output":{"name":"treeset"}}],[11,"with_comparator","","Creates an empty `TreeSet` ordered according to the given comparator.",8,{"inputs":[{"name":"c"}],"output":{"name":"treeset"}}],[11,"comparator","","Returns the comparator according to which the `TreeSet` is ordered.",8,{"inputs":[{"name":"treeset"}],"output":{"name":"c"}}],[11,"iter","","Gets a lazy iterator over the values in the set, in ascending order.",8,{"inputs":[{"name":"treeset"}],"output":{"name":"iter"}}],[11,"rev_iter","","Gets a lazy iterator over the values in the set, in descending order.",8,{"inputs":[{"name":"treeset"}],"output":{"name":"reviter"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of the\nset in ascending order. The set cannot be used after calling this.",8,{"inputs":[{"name":"treeset"}],"output":{"name":"intoiter"}}],[11,"lower_bound","","Gets a lazy iterator pointing to the first value not less than `v` (greater or equal).\nIf all elements in the set are less than `v` empty iterator is returned.",8,{"inputs":[{"name":"treeset"},{"name":"t"}],"output":{"name":"iter"}}],[11,"upper_bound","","Gets a lazy iterator pointing to the first value greater than `v`.\nIf all elements in the set are less than or equal to `v` an\nempty iterator is returned.",8,{"inputs":[{"name":"treeset"},{"name":"t"}],"output":{"name":"iter"}}],[11,"difference","","Visits the values representing the difference, in ascending order.",8,{"inputs":[{"name":"treeset"},{"name":"treeset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",8,{"inputs":[{"name":"treeset"},{"name":"treeset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, in ascending order.",8,{"inputs":[{"name":"treeset"},{"name":"treeset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, in ascending order.",8,{"inputs":[{"name":"treeset"},{"name":"treeset"}],"output":{"name":"union"}}],[11,"len","","Return the number of elements in the set",8,{"inputs":[{"name":"treeset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements",8,{"inputs":[{"name":"treeset"}],"output":{"name":"bool"}}],[11,"clear","","Clears the set, removing all values.",8,{"inputs":[{"name":"treeset"}],"output":null}],[11,"contains","","Returns `true` if the set contains a value.",8,{"inputs":[{"name":"treeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",8,{"inputs":[{"name":"treeset"},{"name":"treeset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",8,{"inputs":[{"name":"treeset"},{"name":"treeset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",8,{"inputs":[{"name":"treeset"},{"name":"treeset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",8,{"inputs":[{"name":"treeset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",8,{"inputs":[{"name":"treeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"next","","",9,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next","","",10,{"inputs":[{"name":"reviter"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next","","",11,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"next","","",12,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"next","","",13,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"next","","",14,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"next","","",15,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"from_iter","","",8,{"inputs":[{"name":"iter"}],"output":{"name":"treeset"}}],[11,"extend","","",8,{"inputs":[{"name":"treeset"},{"name":"iter"}],"output":null}],[11,"hash","","",8,{"inputs":[{"name":"treeset"},{"name":"h"}],"output":null}],[11,"into_iter","","",8,{"inputs":[{"name":"treeset"}],"output":{"name":"intoiter"}}]],"paths":[[3,"TreeMap"],[3,"Iter"],[3,"RevIter"],[3,"IterMut"],[3,"RevIterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"TreeSet"],[3,"Iter"],[3,"RevIter"],[3,"IntoIter"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"]]};
initSearch(searchIndex);
