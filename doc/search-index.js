var searchIndex = {};
searchIndex["stable_bst"] = {"doc":"Maps are collections of unique keys with corresponding values, and sets are\njust unique keys without a corresponding value.","items":[[4,"Bound","stable_bst","An endpoint of a range of keys.",null,null],[13,"Included","","An inclusive bound.",0,null],[13,"Excluded","","An exclusive bound.",0,null],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in this direction.",0,null],[0,"map","","",null,null],[3,"TreeMap","stable_bst::map","This is implemented as an AA tree, which is a simplified variation of\na red-black tree where red (horizontal) nodes can only be added\nas a right child. The time complexity is the same, and re-balancing\noperations are more frequent but also cheaper.",null,null],[3,"RangeMut","","",null,null],[3,"Range","","",null,null],[3,"Iter","","Lazy forward iterator over a map",null,null],[3,"IterMut","","Lazy forward iterator over a map that allows for the mutation of\nthe values.",null,null],[3,"Keys","","TreeMap keys iterator.",null,null],[3,"Values","","TreeMap values iterator.",null,null],[3,"IntoIter","","Lazy forward iterator over a map that consumes the map while iterating",null,null],[4,"Forward","","",null,null],[4,"Backward","","",null,null],[8,"Direction","","",null,null],[10,"forward","","",1,{"inputs":[],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"treemap"}],"output":{"name":"treemap"}}],[11,"eq","","",2,{"inputs":[{"name":"treemap"},{"name":"treemap"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"treemap"},{"name":"treemap"}],"output":{"name":"option"}}],[11,"cmp","","",2,{"inputs":[{"name":"treemap"},{"name":"treemap"}],"output":{"name":"ordering"}}],[11,"fmt","","",2,{"inputs":[{"name":"treemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"treemap"}}],[11,"index","","",2,{"inputs":[{"name":"treemap"},{"name":"q"}],"output":{"name":"v"}}],[11,"index_mut","","",2,{"inputs":[{"name":"treemap"},{"name":"q"}],"output":{"name":"v"}}],[11,"new","","Creates an empty `TreeMap` ordered according to the natural order of its keys.",2,{"inputs":[],"output":{"name":"treemap"}}],[11,"with_comparator","","Creates an empty `TreeMap` ordered according to the given comparator.",2,{"inputs":[{"name":"c"}],"output":{"name":"treemap"}}],[11,"comparator","","Returns the comparator according to which the `TreeMap` is ordered.",2,{"inputs":[{"name":"treemap"}],"output":{"name":"c"}}],[11,"keys","","Gets a lazy iterator over the keys in the map, in ascending order.",2,{"inputs":[{"name":"treemap"}],"output":{"name":"keys"}}],[11,"values","","Gets a lazy iterator over the values in the map, in ascending order\nwith respect to the corresponding keys.",2,{"inputs":[{"name":"treemap"}],"output":{"name":"values"}}],[11,"iter","","Gets a lazy iterator over the key-value pairs in the map, in ascending order.",2,{"inputs":[{"name":"treemap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a lazy forward iterator over the key-value pairs in the\nmap, with the values being mutable.",2,{"inputs":[{"name":"treemap"}],"output":{"name":"itermut"}}],[11,"into_iter","","Gets a lazy iterator that consumes the treemap.",2,{"inputs":[{"name":"treemap"}],"output":{"name":"intoiter"}}],[11,"len","","Return the number of elements in the map.",2,{"inputs":[{"name":"treemap"}],"output":{"name":"usize"}}],[11,"is_empty","","Return true if the map contains no elements.",2,{"inputs":[{"name":"treemap"}],"output":{"name":"bool"}}],[11,"clear","","Clears the map, removing all values.",2,{"inputs":[{"name":"treemap"}],"output":null}],[11,"get","","Returns a reference to the value corresponding to the key.",2,{"inputs":[{"name":"treemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",2,{"inputs":[{"name":"treemap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",2,{"inputs":[{"name":"treemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair from the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",2,{"inputs":[{"name":"treemap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",2,{"inputs":[{"name":"treemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"find_with","","Returns the value for which `f(key)` returns `Equal`. `f` is invoked\nwith current key and guides tree navigation. That means `f` should\nbe aware of natural ordering of the tree.",2,{"inputs":[{"name":"treemap"},{"name":"f"}],"output":{"name":"option"}}],[11,"find_with_mut","","Returns the value for which `f(key)` returns `Equal`. `f` is invoked\nwith current key and guides tree navigation. That means `f` should\nbe aware of natural ordering of the tree.",2,{"inputs":[{"name":"treemap"},{"name":"f"}],"output":{"name":"option"}}],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",2,{"inputs":[{"name":"treemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"rangemut"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",2,{"inputs":[{"name":"treemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"forward","","",3,{"inputs":[],"output":{"name":"bool"}}],[11,"forward","","",4,{"inputs":[],"output":{"name":"bool"}}],[11,"next","","Advances the iterator to the next node (in order) and return a\ntuple with a reference to the key and value. If there are no\nmore nodes, return `None`.",5,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next","","",6,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"next_back","","",6,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"next","","",7,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next_back","","",7,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",8,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"next","","",9,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next","","",10,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next","","",11,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"from_iter","","",2,{"inputs":[{"name":"t"}],"output":{"name":"treemap"}}],[11,"extend","","",2,{"inputs":[{"name":"treemap"},{"name":"t"}],"output":null}],[11,"hash","","",2,{"inputs":[{"name":"treemap"},{"name":"h"}],"output":null}],[11,"into_iter","","",2,{"inputs":[{"name":"treemap"}],"output":{"name":"intoiter"}}],[0,"set","stable_bst","",null,null],[3,"TreeSet","stable_bst::set","An implementation of a set on top of the `TreeMap` container.",null,null],[3,"Iter","","A lazy forward iterator over a set.",null,null],[3,"Range","","",null,null],[3,"IntoIter","","A lazy forward iterator over a set that consumes the set while iterating.",null,null],[3,"Difference","","A lazy iterator producing elements in the set difference (in-order).",null,null],[3,"SymmetricDifference","","A lazy iterator producing elements in the set symmetric difference (in-order).",null,null],[3,"Intersection","","A lazy iterator producing elements in the set intersection (in-order).",null,null],[3,"Union","","A lazy iterator producing elements in the set union (in-order).",null,null],[11,"clone","","",12,{"inputs":[{"name":"treeset"}],"output":{"name":"treeset"}}],[11,"eq","","",12,{"inputs":[{"name":"treeset"},{"name":"treeset"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"treeset"},{"name":"treeset"}],"output":{"name":"option"}}],[11,"cmp","","",12,{"inputs":[{"name":"treeset"},{"name":"treeset"}],"output":{"name":"ordering"}}],[11,"fmt","","",12,{"inputs":[{"name":"treeset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",12,{"inputs":[],"output":{"name":"treeset"}}],[11,"new","","Creates an empty `TreeSet` ordered according to the natural order of its values.",12,{"inputs":[],"output":{"name":"treeset"}}],[11,"with_comparator","","Creates an empty `TreeSet` ordered according to the given comparator.",12,{"inputs":[{"name":"c"}],"output":{"name":"treeset"}}],[11,"comparator","","Returns the comparator according to which the `TreeSet` is ordered.",12,{"inputs":[{"name":"treeset"}],"output":{"name":"c"}}],[11,"iter","","Gets a lazy iterator over the values in the set, in ascending order.",12,{"inputs":[{"name":"treeset"}],"output":{"name":"iter"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of the\nset in ascending order. The set cannot be used after calling this.",12,{"inputs":[{"name":"treeset"}],"output":{"name":"intoiter"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",12,{"inputs":[{"name":"treeset"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"difference","","Visits the values representing the difference, in ascending order.",12,{"inputs":[{"name":"treeset"},{"name":"treeset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",12,{"inputs":[{"name":"treeset"},{"name":"treeset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, in ascending order.",12,{"inputs":[{"name":"treeset"},{"name":"treeset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, in ascending order.",12,{"inputs":[{"name":"treeset"},{"name":"treeset"}],"output":{"name":"union"}}],[11,"len","","Return the number of elements in the set",12,{"inputs":[{"name":"treeset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements",12,{"inputs":[{"name":"treeset"}],"output":{"name":"bool"}}],[11,"clear","","Clears the set, removing all values.",12,{"inputs":[{"name":"treeset"}],"output":null}],[11,"contains","","Returns `true` if the set contains a value.",12,{"inputs":[{"name":"treeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",12,{"inputs":[{"name":"treeset"},{"name":"treeset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",12,{"inputs":[{"name":"treeset"},{"name":"treeset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",12,{"inputs":[{"name":"treeset"},{"name":"treeset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",12,{"inputs":[{"name":"treeset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",12,{"inputs":[{"name":"treeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"next","","",13,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",13,null],[11,"next","","",14,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next_back","","",14,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",15,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",15,null],[11,"next","","",16,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"next","","",17,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"next","","",18,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"next","","",19,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"from_iter","","",12,{"inputs":[{"name":"iter"}],"output":{"name":"treeset"}}],[11,"extend","","",12,{"inputs":[{"name":"treeset"},{"name":"iter"}],"output":null}],[11,"hash","","",12,{"inputs":[{"name":"treeset"},{"name":"h"}],"output":null}],[11,"into_iter","","",12,{"inputs":[{"name":"treeset"}],"output":{"name":"intoiter"}}],[11,"eq","stable_bst","",0,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"bound"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"bound"}],"output":{"name":"bound"}}]],"paths":[[4,"Bound"],[8,"Direction"],[3,"TreeMap"],[4,"Forward"],[4,"Backward"],[3,"IterMut"],[3,"RangeMut"],[3,"Range"],[3,"Iter"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"TreeSet"],[3,"Iter"],[3,"Range"],[3,"IntoIter"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"]]};
searchIndex["ordered_iter"] = {"doc":"Ordered iterators.","items":[[3,"InnerJoinMap","ordered_iter","",null,null],[3,"InnerJoinMapSet","","",null,null],[3,"InnerJoinSet","","",null,null],[3,"OuterJoin","","",null,null],[8,"OrderedMapIterator","","Allows an iterator to do an inner join with another\niterator to combine their values or filter based on their keys.",null,null],[16,"Key","","",0,null],[16,"Val","","",0,null],[11,"inner_join_map","","Joins two ordered maps together.",0,{"inputs":[{"name":"orderedmapiterator"},{"name":"i"}],"output":{"name":"innerjoinmap"}}],[11,"inner_join_set","","Filters an ordered map with an ordered set.",0,{"inputs":[{"name":"orderedmapiterator"},{"name":"i"}],"output":{"name":"innerjoinmapset"}}],[11,"outer_join","","Joins an ordered iterator with another ordered iterator.",0,{"inputs":[{"name":"orderedmapiterator"},{"name":"i"}],"output":{"name":"outerjoin"}}],[8,"OrderedSetIterator","","Allows an iterator to do an inner join with another\niterator to combine their values or filter based on their keys.",null,null],[11,"inner_join_map","","Joins two ordered maps together.",1,{"inputs":[{"name":"orderedsetiterator"},{"name":"i"}],"output":{"name":"innerjoinmapset"}}],[11,"inner_join_set","","Filters an ordered map with an ordered set.",1,{"inputs":[{"name":"orderedsetiterator"},{"name":"i"}],"output":{"name":"innerjoinset"}}],[11,"clone","","",2,{"inputs":[{"name":"innerjoinmap"}],"output":{"name":"innerjoinmap"}}],[11,"clone","","",3,{"inputs":[{"name":"innerjoinmapset"}],"output":{"name":"innerjoinmapset"}}],[11,"clone","","",4,{"inputs":[{"name":"innerjoinset"}],"output":{"name":"innerjoinset"}}],[11,"clone","","",5,{"inputs":[{"name":"outerjoin"}],"output":{"name":"outerjoin"}}],[11,"next","","",2,{"inputs":[{"name":"innerjoinmap"}],"output":{"name":"option"}}],[11,"next","","",4,{"inputs":[{"name":"innerjoinset"}],"output":{"name":"option"}}],[11,"next","","",3,{"inputs":[{"name":"innerjoinmapset"}],"output":{"name":"option"}}],[11,"next","","",5,{"inputs":[{"name":"outerjoin"}],"output":{"name":"option"}}]],"paths":[[8,"OrderedMapIterator"],[8,"OrderedSetIterator"],[3,"InnerJoinMap"],[3,"InnerJoinMapSet"],[3,"InnerJoinSet"],[3,"OuterJoin"]]};
searchIndex["bit_set"] = {"doc":"An implementation of a set using a bit vector as an underlying\nrepresentation for holding unsigned numerical elements.","items":[[3,"BitSet","bit_set","",null,null],[3,"Iter","","An iterator for `BitSet`.",null,null],[3,"Union","","",null,null],[3,"Intersection","","",null,null],[3,"Difference","","",null,null],[3,"SymmetricDifference","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"bitset"}],"output":{"name":"self"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"from_iter","","",0,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",0,{"inputs":[{"name":"bitset"},{"name":"i"}],"output":null}],[11,"partial_cmp","","",0,{"inputs":[{"name":"bitset"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"bitset"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"eq","","",0,{"inputs":[{"name":"bitset"},{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new empty `BitSet`.",0,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Creates a new `BitSet` with initially no contents, able to\nhold `nbits` elements without resizing.",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_bit_vec","","Creates a new `BitSet` from the given bit vector.",0,{"inputs":[{"name":"bitvec"}],"output":{"name":"self"}}],[11,"from_bytes","","",0,null],[11,"capacity","","Returns the capacity in bits for this bit vector. Inserting any\nelement less than this amount will not trigger a resizing.",0,{"inputs":[{"name":"bitset"}],"output":{"name":"usize"}}],[11,"reserve_len","","Reserves capacity for the given `BitSet` to contain `len` distinct elements. In the case\nof `BitSet` this means reallocations will not occur as long as all inserted elements\nare less than `len`.",0,{"inputs":[{"name":"bitset"},{"name":"usize"}],"output":null}],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `BitSet` to contain `len` distinct elements.\nIn the case of `BitSet` this means reallocations will not occur as long as all inserted\nelements are less than `len`.",0,{"inputs":[{"name":"bitset"},{"name":"usize"}],"output":null}],[11,"into_bit_vec","","Consumes this set to return the underlying bit vector.",0,{"inputs":[{"name":"bitset"}],"output":{"name":"bitvec"}}],[11,"get_ref","","Returns a reference to the underlying bit vector.",0,{"inputs":[{"name":"bitset"}],"output":{"name":"bitvec"}}],[11,"shrink_to_fit","","Truncates the underlying vector to the least length required.",0,{"inputs":[{"name":"bitset"}],"output":null}],[11,"iter","","Iterator over each usize stored in the `BitSet`.",0,{"inputs":[{"name":"bitset"}],"output":{"name":"iter"}}],[11,"union","","Iterator over each usize stored in `self` union `other`.\nSee [union_with](#method.union_with) for an efficient in-place version.",0,{"inputs":[{"name":"bitset"},{"name":"self"}],"output":{"name":"union"}}],[11,"intersection","","Iterator over each usize stored in `self` intersect `other`.\nSee [intersect_with](#method.intersect_with) for an efficient in-place version.",0,{"inputs":[{"name":"bitset"},{"name":"self"}],"output":{"name":"intersection"}}],[11,"difference","","Iterator over each usize stored in the `self` setminus `other`.\nSee [difference_with](#method.difference_with) for an efficient in-place version.",0,{"inputs":[{"name":"bitset"},{"name":"self"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Iterator over each usize stored in the symmetric difference of `self` and `other`.\nSee [symmetric_difference_with](#method.symmetric_difference_with) for\nan efficient in-place version.",0,{"inputs":[{"name":"bitset"},{"name":"self"}],"output":{"name":"symmetricdifference"}}],[11,"union_with","","Unions in-place with the specified other bit vector.",0,{"inputs":[{"name":"bitset"},{"name":"self"}],"output":null}],[11,"intersect_with","","Intersects in-place with the specified other bit vector.",0,{"inputs":[{"name":"bitset"},{"name":"self"}],"output":null}],[11,"difference_with","","Makes this bit vector the difference with the specified other bit vector\nin-place.",0,{"inputs":[{"name":"bitset"},{"name":"self"}],"output":null}],[11,"symmetric_difference_with","","Makes this bit vector the symmetric difference with the specified other\nbit vector in-place.",0,{"inputs":[{"name":"bitset"},{"name":"self"}],"output":null}],[11,"len","","Returns the number of set bits in this set.",0,{"inputs":[{"name":"bitset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether there are no bits set in this set",0,{"inputs":[{"name":"bitset"}],"output":{"name":"bool"}}],[11,"clear","","Clears all bits in this set",0,{"inputs":[{"name":"bitset"}],"output":null}],[11,"contains","","Returns `true` if this set contains the specified integer.",0,{"inputs":[{"name":"bitset"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",0,{"inputs":[{"name":"bitset"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",0,{"inputs":[{"name":"bitset"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",0,{"inputs":[{"name":"bitset"},{"name":"self"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",0,{"inputs":[{"name":"bitset"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",0,{"inputs":[{"name":"bitset"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"bitset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,{"inputs":[{"name":"bitset"},{"name":"h"}],"output":null}],[11,"clone","","",1,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",2,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[11,"clone","","",3,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[11,"clone","","",4,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[11,"clone","","",5,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",1,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next","","",2,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next","","",3,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next","","",4,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next","","",5,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null]],"paths":[[3,"BitSet"],[3,"Iter"],[3,"Union"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"]]};
searchIndex["bit_vec"] = {"doc":"Collections implemented with bit vectors.","items":[[3,"BitVec","bit_vec","The bitvector type.",null,null],[3,"Iter","","An iterator for `BitVec`.",null,null],[3,"IntoIter","","",null,null],[3,"Blocks","","An iterator over the blocks of a `BitVec`.",null,null],[8,"BitBlock","","Abstracts over a pile of bits (basically unsigned primitives)",null,null],[10,"bits","","How many bits it has",0,{"inputs":[],"output":{"name":"usize"}}],[11,"bytes","","How many bytes it has",0,{"inputs":[],"output":{"name":"usize"}}],[10,"from_byte","","Convert a byte into this type (lowest-order bits set)",0,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[10,"count_ones","","Count the number of 1&#39;s in the bitwise repr",0,{"inputs":[{"name":"bitblock"}],"output":{"name":"usize"}}],[10,"zero","","Get `0`",0,{"inputs":[],"output":{"name":"self"}}],[10,"one","","Get `1`",0,{"inputs":[],"output":{"name":"self"}}],[11,"index","","",1,{"inputs":[{"name":"bitvec"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"new","","Creates an empty `BitVec`.",1,{"inputs":[],"output":{"name":"self"}}],[11,"from_elem","","Creates a `BitVec` that holds `nbits` elements, setting each element\nto `bit`.",1,{"inputs":[{"name":"usize"},{"name":"bool"}],"output":{"name":"self"}}],[11,"with_capacity","","Constructs a new, empty `BitVec` with the specified capacity.",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_bytes","","Transforms a byte-vector into a `BitVec`. Each byte becomes eight bits,\nwith the most significant bits of each byte coming first. Each\nbit becomes `true` if equal to 1 or `false` if equal to 0.",1,null],[11,"from_fn","","Creates a `BitVec` of the specified length where the value at each index\nis `f(index)`.",1,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"self"}}],[11,"blocks","","Iterator over the underlying blocks of data",1,{"inputs":[{"name":"bitvec"}],"output":{"name":"blocks"}}],[11,"storage","","Exposes the raw block storage of this BitVec",1,null],[11,"storage_mut","","Exposes the raw block storage of this BitVec",1,{"inputs":[{"name":"bitvec"}],"output":{"name":"vec"}}],[11,"get","","Retrieves the value at index `i`, or `None` if the index is out of bounds.",1,{"inputs":[{"name":"bitvec"},{"name":"usize"}],"output":{"name":"option"}}],[11,"set","","Sets the value of a bit at an index `i`.",1,{"inputs":[{"name":"bitvec"},{"name":"usize"},{"name":"bool"}],"output":null}],[11,"set_all","","Sets all bits to 1.",1,{"inputs":[{"name":"bitvec"}],"output":null}],[11,"negate","","Flips all bits.",1,{"inputs":[{"name":"bitvec"}],"output":null}],[11,"union","","Calculates the union of two bitvectors. This acts like the bitwise `or`\nfunction.",1,{"inputs":[{"name":"bitvec"},{"name":"self"}],"output":{"name":"bool"}}],[11,"intersect","","Calculates the intersection of two bitvectors. This acts like the\nbitwise `and` function.",1,{"inputs":[{"name":"bitvec"},{"name":"self"}],"output":{"name":"bool"}}],[11,"difference","","Calculates the difference between two bitvectors.",1,{"inputs":[{"name":"bitvec"},{"name":"self"}],"output":{"name":"bool"}}],[11,"all","","Returns `true` if all bits are 1.",1,{"inputs":[{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the elements of the vector in order.",1,{"inputs":[{"name":"bitvec"}],"output":{"name":"iter"}}],[11,"none","","Returns `true` if all bits are 0.",1,{"inputs":[{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"any","","Returns `true` if any bit is 1.",1,{"inputs":[{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"to_bytes","","Organises the bits into bytes, such that the first bit in the\n`BitVec` becomes the high-order bit of the first byte. If the\nsize of the `BitVec` is not a multiple of eight then trailing bits\nwill be filled-in with `false`.",1,{"inputs":[{"name":"bitvec"}],"output":{"name":"vec"}}],[11,"eq_vec","","Compares a `BitVec` to a slice of `bool`s.\nBoth the `BitVec` and slice must have the same length.",1,null],[11,"truncate","","Shortens a `BitVec`, dropping excess elements.",1,{"inputs":[{"name":"bitvec"},{"name":"usize"}],"output":null}],[11,"reserve","","Reserves capacity for at least `additional` more bits to be inserted in the given\n`BitVec`. The collection may reserve more space to avoid frequent reallocations.",1,{"inputs":[{"name":"bitvec"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bits to be inserted in the\ngiven `BitVec`. Does nothing if the capacity is already sufficient.",1,{"inputs":[{"name":"bitvec"},{"name":"usize"}],"output":null}],[11,"capacity","","Returns the capacity in bits for this bit vector. Inserting any\nelement less than this amount will not trigger a resizing.",1,{"inputs":[{"name":"bitvec"}],"output":{"name":"usize"}}],[11,"grow","","Grows the `BitVec` in-place, adding `n` copies of `value` to the `BitVec`.",1,{"inputs":[{"name":"bitvec"},{"name":"usize"},{"name":"bool"}],"output":null}],[11,"pop","","Removes the last bit from the BitVec, and returns it. Returns None if the BitVec is empty.",1,{"inputs":[{"name":"bitvec"}],"output":{"name":"option"}}],[11,"push","","Pushes a `bool` onto the end.",1,{"inputs":[{"name":"bitvec"},{"name":"bool"}],"output":null}],[11,"len","","Returns the total number of bits in this vector",1,{"inputs":[{"name":"bitvec"}],"output":{"name":"usize"}}],[11,"set_len","","Sets the number of bits that this BitVec considers initialized.",1,{"inputs":[{"name":"bitvec"},{"name":"usize"}],"output":null}],[11,"is_empty","","Returns true if there are no bits in this vector",1,{"inputs":[{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"clear","","Clears all bits in this vector.",1,{"inputs":[{"name":"bitvec"}],"output":null}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"from_iter","","",1,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",1,{"inputs":[{"name":"bitvec"},{"name":"i"}],"output":null}],[11,"clone","","",1,{"inputs":[{"name":"bitvec"}],"output":{"name":"self"}}],[11,"clone_from","","",1,{"inputs":[{"name":"bitvec"},{"name":"self"}],"output":null}],[11,"partial_cmp","","",1,{"inputs":[{"name":"bitvec"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"bitvec"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"fmt","","",1,{"inputs":[{"name":"bitvec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,{"inputs":[{"name":"bitvec"},{"name":"h"}],"output":null}],[11,"eq","","",1,{"inputs":[{"name":"bitvec"},{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",2,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next_back","","",2,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",3,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next_back","","",3,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"into_iter","","",1,{"inputs":[{"name":"bitvec"}],"output":{"name":"intoiter"}}],[11,"clone","","",4,{"inputs":[{"name":"blocks"}],"output":{"name":"blocks"}}],[11,"next","","",4,{"inputs":[{"name":"blocks"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"blocks"}],"output":{"name":"option"}}]],"paths":[[8,"BitBlock"],[3,"BitVec"],[3,"Iter"],[3,"IntoIter"],[3,"Blocks"]]};
searchIndex["vec_map"] = {"doc":"A simple map based on a vector for small integer keys. Space requirements\nare O(highest integer key).","items":[[3,"VecMap","vec_map","A map optimized for small integer keys.",null,null],[3,"VacantEntry","","A vacant Entry.",null,null],[3,"OccupiedEntry","","An occupied Entry.",null,null],[3,"Iter","","An iterator over the key-value pairs of a map.",null,null],[3,"IterMut","","An iterator over the key-value pairs of a map, with the\nvalues being mutable.",null,null],[3,"Keys","","An iterator over the keys of a map.",null,null],[3,"Values","","An iterator over the values of a map.",null,null],[3,"IntoIter","","A consuming iterator over the key-value pairs of a map.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Vacant","","A vacant Entry",0,null],[13,"Occupied","","An occupied Entry",0,null],[11,"clone","","",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"vecmap"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"vecmap"}}],[11,"hash","","",1,{"inputs":[{"name":"vecmap"},{"name":"h"}],"output":null}],[11,"new","","Creates an empty `VecMap`.",1,{"inputs":[],"output":{"name":"vecmap"}}],[11,"with_capacity","","Creates an empty `VecMap` with space for at least `capacity`\nelements before resizing.",1,{"inputs":[{"name":"usize"}],"output":{"name":"vecmap"}}],[11,"capacity","","Returns the number of elements the `VecMap` can hold without\nreallocating.",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"usize"}}],[11,"reserve_len","","Reserves capacity for the given `VecMap` to contain `len` distinct keys.\nIn the case of `VecMap` this means reallocations will not occur as long\nas all inserted keys are less than `len`.",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":null}],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `VecMap` to contain `len` distinct keys.\nIn the case of `VecMap` this means reallocations will not occur as long as all inserted\nkeys are less than `len`.",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":null}],[11,"keys","","Returns an iterator visiting all keys in ascending order of the keys.\nThe iterator&#39;s element type is `usize`.",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"keys"}}],[11,"values","","Returns an iterator visiting all values in ascending order of the keys.\nThe iterator&#39;s element type is `&amp;&#39;r V`.",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"values"}}],[11,"iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys.\nThe iterator&#39;s element type is `(usize, &amp;&#39;r V)`.",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator visiting all key-value pairs in ascending order of the keys,\nwith mutable references to the values.\nThe iterator&#39;s element type is `(usize, &amp;&#39;r mut V)`.",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"itermut"}}],[11,"split_off","","Splits the collection into two at the given key.",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"self"}}],[11,"len","","Returns the number of elements in the map.",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"bool"}}],[11,"clear","","Clears the map, removing all key-value pairs.",1,{"inputs":[{"name":"vecmap"}],"output":null}],[11,"get","","Returns a reference to the value corresponding to the key.",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",1,{"inputs":[{"name":"vecmap"},{"name":"usize"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"entry"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and\nreturns a mutable reference to the value in the entry.",0,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default\nfunction if empty, and returns a mutable reference to the value in the\nentry.",0,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it.",2,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",3,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",3,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",3,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry&#39;s key,\nand returns the entry&#39;s old value.",3,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",3,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"fmt","","",1,{"inputs":[{"name":"vecmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",1,{"inputs":[{"name":"i"}],"output":{"name":"vecmap"}}],[11,"into_iter","","Returns an iterator visiting all key-value pairs in ascending order of\nthe keys, consuming the original `VecMap`.\nThe iterator&#39;s element type is `(usize, &amp;&#39;r V)`.",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"intoiter"}}],[11,"extend","","",1,{"inputs":[{"name":"vecmap"},{"name":"i"}],"output":null}],[11,"extend","","",1,{"inputs":[{"name":"vecmap"},{"name":"i"}],"output":null}],[11,"index","","",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index","","",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"clone","","",4,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",4,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",5,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",6,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"clone","","",7,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"next","","",6,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"next","","",7,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"next_back","","",7,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"next","","",8,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}]],"paths":[[4,"Entry"],[3,"VecMap"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"IntoIter"]]};
searchIndex["compare"] = {"doc":"Comparators.","items":[[3,"Borrowing","compare","A comparator that borrows its parameters before comparing them.",null,null],[3,"Extract","","A comparator that extracts a sort key from a value.",null,null],[3,"Then","","A comparator that [lexicographically]\n(https://en.wikipedia.org/wiki/Lexicographical_order) combines two others.",null,null],[3,"Natural","","A comparator that delegates to [`Ord`]\n(http://doc.rust-lang.org/std/cmp/trait.Ord.html).",null,null],[3,"Rev","","A comparator that reverses the ordering of another.",null,null],[3,"Swap","","A comparator that swaps another&#39;s parameters, maintaining the underlying ordering.",null,null],[5,"max","","Returns the maximum of two values according to the given comparator, or `r` if they\nare equal.",null,{"inputs":[{"name":"c"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"min","","Returns the minimum of two values according to the given comparator, or `l` if they\nare equal.",null,{"inputs":[{"name":"c"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"natural","","Returns a comparator that delegates to `Ord`.",null,{"inputs":[],"output":{"name":"natural"}}],[8,"Compare","","A comparator imposing a [total order](https://en.wikipedia.org/wiki/Total_order).",null,null],[10,"compare","","Compares two values, returning `Less`, `Equal`, or `Greater` if `l` is less\nthan, equal to, or greater than `r`, respectively.",0,{"inputs":[{"name":"compare"},{"name":"l"},{"name":"r"}],"output":{"name":"ordering"}}],[11,"compares_lt","","Checks if `l` is less than `r`.",0,{"inputs":[{"name":"compare"},{"name":"l"},{"name":"r"}],"output":{"name":"bool"}}],[11,"compares_le","","Checks if `l` is less than or equal to `r`.",0,{"inputs":[{"name":"compare"},{"name":"l"},{"name":"r"}],"output":{"name":"bool"}}],[11,"compares_ge","","Checks if `l` is greater than or equal to `r`.",0,{"inputs":[{"name":"compare"},{"name":"l"},{"name":"r"}],"output":{"name":"bool"}}],[11,"compares_gt","","Checks if `l` is greater than `r`.",0,{"inputs":[{"name":"compare"},{"name":"l"},{"name":"r"}],"output":{"name":"bool"}}],[11,"compares_eq","","Checks if `l` is equal to `r`.",0,{"inputs":[{"name":"compare"},{"name":"l"},{"name":"r"}],"output":{"name":"bool"}}],[11,"compares_ne","","Checks if `l` is not equal to `r`.",0,{"inputs":[{"name":"compare"},{"name":"l"},{"name":"r"}],"output":{"name":"bool"}}],[11,"borrowing","","Borrows the comparator&#39;s parameters before comparing them.",0,{"inputs":[{"name":"compare"}],"output":{"name":"borrowing"}}],[11,"rev","","Reverses the ordering of the comparator.",0,{"inputs":[{"name":"compare"}],"output":{"name":"rev"}}],[11,"swap","","Swaps the comparator&#39;s parameters, maintaining the underlying ordering.",0,{"inputs":[{"name":"compare"}],"output":{"name":"swap"}}],[11,"then","","[Lexicographically](https://en.wikipedia.org/wiki/Lexicographical_order) combines\nthe comparator with another.",0,{"inputs":[{"name":"compare"},{"name":"d"}],"output":{"name":"then"}}],[11,"compare","","",1,{"inputs":[{"name":"borrowing"},{"name":"l"},{"name":"r"}],"output":{"name":"ordering"}}],[11,"compares_lt","","",1,{"inputs":[{"name":"borrowing"},{"name":"l"},{"name":"r"}],"output":{"name":"bool"}}],[11,"compares_le","","",1,{"inputs":[{"name":"borrowing"},{"name":"l"},{"name":"r"}],"output":{"name":"bool"}}],[11,"compares_ge","","",1,{"inputs":[{"name":"borrowing"},{"name":"l"},{"name":"r"}],"output":{"name":"bool"}}],[11,"compares_gt","","",1,{"inputs":[{"name":"borrowing"},{"name":"l"},{"name":"r"}],"output":{"name":"bool"}}],[11,"compares_eq","","",1,{"inputs":[{"name":"borrowing"},{"name":"l"},{"name":"r"}],"output":{"name":"bool"}}],[11,"compares_ne","","",1,{"inputs":[{"name":"borrowing"},{"name":"l"},{"name":"r"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"borrowing"}],"output":{"name":"self"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",1,{"inputs":[{"name":"borrowing"},{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"borrowing"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"extract"},{"name":"extract"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"extract"},{"name":"extract"}],"output":{"name":"bool"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"extract"}}],[11,"fmt","","",2,{"inputs":[{"name":"extract"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"extract"}],"output":{"name":"extract"}}],[11,"new","","Returns a comparator that extracts a sort key using `ext` and compares it according to its\nnatural ordering.",2,{"inputs":[{"name":"e"}],"output":{"name":"self"}}],[11,"with_cmp","","Returns a comparator that extracts a sort key using `ext` and compares it using\n`cmp`.",2,{"inputs":[{"name":"e"},{"name":"c"}],"output":{"name":"self"}}],[11,"compare","","",2,{"inputs":[{"name":"extract"},{"name":"t"},{"name":"t"}],"output":{"name":"ordering"}}],[11,"compares_lt","","",2,{"inputs":[{"name":"extract"},{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[11,"compares_le","","",2,{"inputs":[{"name":"extract"},{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[11,"compares_ge","","",2,{"inputs":[{"name":"extract"},{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[11,"compares_gt","","",2,{"inputs":[{"name":"extract"},{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[11,"compares_eq","","",2,{"inputs":[{"name":"extract"},{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[11,"compares_ne","","",2,{"inputs":[{"name":"extract"},{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"then"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"then"},{"name":"then"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"then"},{"name":"then"}],"output":{"name":"bool"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"then"}}],[11,"clone","","",3,{"inputs":[{"name":"then"}],"output":{"name":"then"}}],[11,"compare","","",3,{"inputs":[{"name":"then"},{"name":"l"},{"name":"r"}],"output":{"name":"ordering"}}],[11,"compare","","",4,{"inputs":[{"name":"natural"},{"name":"t"},{"name":"t"}],"output":{"name":"ordering"}}],[11,"compares_lt","","",4,{"inputs":[{"name":"natural"},{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[11,"compares_le","","",4,{"inputs":[{"name":"natural"},{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[11,"compares_ge","","",4,{"inputs":[{"name":"natural"},{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[11,"compares_gt","","",4,{"inputs":[{"name":"natural"},{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[11,"compares_eq","","",4,{"inputs":[{"name":"natural"},{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[11,"compares_ne","","",4,{"inputs":[{"name":"natural"},{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"natural"}],"output":{"name":"self"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",4,{"inputs":[{"name":"natural"},{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"natural"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"rev"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"rev"},{"name":"rev"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"rev"},{"name":"rev"}],"output":{"name":"bool"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"rev"}}],[11,"clone","","",5,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"compare","","",5,{"inputs":[{"name":"rev"},{"name":"l"},{"name":"r"}],"output":{"name":"ordering"}}],[11,"compares_lt","","",5,{"inputs":[{"name":"rev"},{"name":"l"},{"name":"r"}],"output":{"name":"bool"}}],[11,"compares_le","","",5,{"inputs":[{"name":"rev"},{"name":"l"},{"name":"r"}],"output":{"name":"bool"}}],[11,"compares_ge","","",5,{"inputs":[{"name":"rev"},{"name":"l"},{"name":"r"}],"output":{"name":"bool"}}],[11,"compares_gt","","",5,{"inputs":[{"name":"rev"},{"name":"l"},{"name":"r"}],"output":{"name":"bool"}}],[11,"compares_eq","","",5,{"inputs":[{"name":"rev"},{"name":"l"},{"name":"r"}],"output":{"name":"bool"}}],[11,"compares_ne","","",5,{"inputs":[{"name":"rev"},{"name":"l"},{"name":"r"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"swap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"swap"},{"name":"swap"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"swap"},{"name":"swap"}],"output":{"name":"bool"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"swap"}}],[11,"clone","","",6,{"inputs":[{"name":"swap"}],"output":{"name":"swap"}}],[11,"compare","","",6,{"inputs":[{"name":"swap"},{"name":"r"},{"name":"l"}],"output":{"name":"ordering"}}],[11,"compares_lt","","",6,{"inputs":[{"name":"swap"},{"name":"r"},{"name":"l"}],"output":{"name":"bool"}}],[11,"compares_le","","",6,{"inputs":[{"name":"swap"},{"name":"r"},{"name":"l"}],"output":{"name":"bool"}}],[11,"compares_ge","","",6,{"inputs":[{"name":"swap"},{"name":"r"},{"name":"l"}],"output":{"name":"bool"}}],[11,"compares_gt","","",6,{"inputs":[{"name":"swap"},{"name":"r"},{"name":"l"}],"output":{"name":"bool"}}],[11,"compares_eq","","",6,{"inputs":[{"name":"swap"},{"name":"r"},{"name":"l"}],"output":{"name":"bool"}}],[11,"compares_ne","","",6,{"inputs":[{"name":"swap"},{"name":"r"},{"name":"l"}],"output":{"name":"bool"}}]],"paths":[[8,"Compare"],[3,"Borrowing"],[3,"Extract"],[3,"Then"],[3,"Natural"],[3,"Rev"],[3,"Swap"]]};
initSearch(searchIndex);
